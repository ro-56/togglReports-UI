name: Release
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  create-and-publish-release:
    outputs:
      release_id: ${{ steps.build_tauri_app.outputs.releaseId }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest] # [macos-latest, ubuntu-20.04, windows-latest]
    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Sync node version and setup cache
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm' # Set this to npm, yarn or pnpm.

      - name: Install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: npm install # Change this to npm, yarn or pnpm.

      - name: Build the app
        uses: tauri-apps/tauri-action@v0
        id: build_tauri_app
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: 'TogglReports v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: false
          prerelease: false

  update-json:
    runs-on: ubuntu-latest
    needs: [create-and-publish-release]
    steps:
      - name: Get release json
        id: get_json
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releaseAssets } = await github.rest.repos.listReleaseAssets({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-and-publish-release.outputs.release_id }}
            })
            const updaterJsonAssetUrl = await releaseAssets.find(obj => {
              return obj.name === "latest.json"
            }).browser_download_url
            const updaterJsonAssetBin = await fetch(updaterJsonAssetUrl)
            const updaterJson = await updaterJsonAssetBin.json()
            return updaterJson
      
      - name: Update Gist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GISTS_APP_TOKEN }}
          script: |
            github.rest.gists.update({
              gist_id: "${{ vars.UPDATER_GIST_ID }}",
              files: {
                "togglReports-latest.json": {
                  "content": '${{ steps.get_json.outputs.result }}'
                }
              }
            })
